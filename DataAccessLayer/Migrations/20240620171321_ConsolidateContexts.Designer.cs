// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240620171321_ConsolidateContexts")]
    partial class ConsolidateContexts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserVocabularySet", b =>
                {
                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VocabularySetsId")
                        .HasColumnType("int");

                    b.HasKey("UsersId", "VocabularySetsId");

                    b.HasIndex("VocabularySetsId");

                    b.ToTable("ApplicationUserVocabularySet");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPremade")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPremade = true,
                            Name = "Verbs"
                        },
                        new
                        {
                            Id = 2,
                            IsPremade = true,
                            Name = "Places"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UserVocabularySet", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VocabularySetId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.HasKey("UserId", "VocabularySetId");

                    b.HasIndex("VocabularySetId");

                    b.ToTable("UserVocabularySets");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.VocabularySet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPremade")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VocabularySets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsPremade = true,
                            Name = "Lesson 1"
                        },
                        new
                        {
                            Id = 2,
                            IsPremade = true,
                            Name = "Lesson 2"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EnglishWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JapaneseWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VocabularySetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VocabularySetId");

                    b.ToTable("Words");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EnglishWord = "apple",
                            JapaneseWord = "りんご",
                            VocabularySetId = 1
                        },
                        new
                        {
                            Id = 2,
                            EnglishWord = "banana",
                            JapaneseWord = "バナナ",
                            VocabularySetId = 1
                        },
                        new
                        {
                            Id = 3,
                            EnglishWord = "to read",
                            JapaneseWord = "よむ",
                            VocabularySetId = 1
                        },
                        new
                        {
                            Id = 4,
                            EnglishWord = "to listen",
                            JapaneseWord = "きく",
                            VocabularySetId = 1
                        },
                        new
                        {
                            Id = 5,
                            EnglishWord = "to watch",
                            JapaneseWord = "みる",
                            VocabularySetId = 1
                        },
                        new
                        {
                            Id = 6,
                            EnglishWord = "school",
                            JapaneseWord = "がっこう",
                            VocabularySetId = 1
                        },
                        new
                        {
                            Id = 7,
                            EnglishWord = "hospital",
                            JapaneseWord = "びょういん",
                            VocabularySetId = 1
                        },
                        new
                        {
                            Id = 8,
                            EnglishWord = "car",
                            JapaneseWord = "くるま",
                            VocabularySetId = 2
                        },
                        new
                        {
                            Id = 9,
                            EnglishWord = "train",
                            JapaneseWord = "でんしゃ",
                            VocabularySetId = 2
                        },
                        new
                        {
                            Id = 10,
                            EnglishWord = "to eat",
                            JapaneseWord = "たべる",
                            VocabularySetId = 2
                        },
                        new
                        {
                            Id = 11,
                            EnglishWord = "to drink",
                            JapaneseWord = "のむ",
                            VocabularySetId = 2
                        },
                        new
                        {
                            Id = 12,
                            EnglishWord = "to do",
                            JapaneseWord = "する",
                            VocabularySetId = 2
                        },
                        new
                        {
                            Id = 13,
                            EnglishWord = "to come",
                            JapaneseWord = "くる",
                            VocabularySetId = 2
                        },
                        new
                        {
                            Id = 14,
                            EnglishWord = "to go",
                            JapaneseWord = "いく",
                            VocabularySetId = 2
                        },
                        new
                        {
                            Id = 15,
                            EnglishWord = "to return",
                            JapaneseWord = "かえる",
                            VocabularySetId = 2
                        },
                        new
                        {
                            Id = 16,
                            EnglishWord = "desk",
                            JapaneseWord = "つくえ",
                            VocabularySetId = 2
                        },
                        new
                        {
                            Id = 17,
                            EnglishWord = "pen",
                            JapaneseWord = "ペン",
                            VocabularySetId = 2
                        },
                        new
                        {
                            Id = 18,
                            EnglishWord = "book",
                            JapaneseWord = "ほん",
                            VocabularySetId = 2
                        },
                        new
                        {
                            Id = 19,
                            EnglishWord = "dictionary",
                            JapaneseWord = "じしょ",
                            VocabularySetId = 2
                        },
                        new
                        {
                            Id = 20,
                            EnglishWord = "library",
                            JapaneseWord = "としょかん",
                            VocabularySetId = 2
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.WordCategory", b =>
                {
                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("WordId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("WordCategories");

                    b.HasData(
                        new
                        {
                            WordId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            WordId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            WordId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            WordId = 6,
                            CategoryId = 2
                        },
                        new
                        {
                            WordId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            WordId = 10,
                            CategoryId = 1
                        },
                        new
                        {
                            WordId = 11,
                            CategoryId = 1
                        },
                        new
                        {
                            WordId = 12,
                            CategoryId = 1
                        },
                        new
                        {
                            WordId = 13,
                            CategoryId = 1
                        },
                        new
                        {
                            WordId = 14,
                            CategoryId = 1
                        },
                        new
                        {
                            WordId = 15,
                            CategoryId = 1
                        },
                        new
                        {
                            WordId = 20,
                            CategoryId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationUserVocabularySet", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.VocabularySet", null)
                        .WithMany()
                        .HasForeignKey("VocabularySetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Category", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.UserVocabularySet", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", "User")
                        .WithMany("UserVocabularySets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.VocabularySet", "VocabularySet")
                        .WithMany("UserVocabularySets")
                        .HasForeignKey("VocabularySetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VocabularySet");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Word", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.VocabularySet", "VocabularySet")
                        .WithMany("Words")
                        .HasForeignKey("VocabularySetId");

                    b.Navigation("VocabularySet");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.WordCategory", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Category", "Category")
                        .WithMany("WordCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Word", "Word")
                        .WithMany("WordCategories")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Entities.ApplicationUser", b =>
                {
                    b.Navigation("UserVocabularySets");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Category", b =>
                {
                    b.Navigation("WordCategories");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.VocabularySet", b =>
                {
                    b.Navigation("UserVocabularySets");

                    b.Navigation("Words");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Word", b =>
                {
                    b.Navigation("WordCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
